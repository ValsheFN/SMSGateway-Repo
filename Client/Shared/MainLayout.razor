@inherits LayoutComponentBase

@inject ILanguageContainerService language
@inject Blazored.LocalStorage.ILocalStorageService Storage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@attribute [Authorize]

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">SMS Gateway</MudText>
        <MudSpacer />
        <MudMenu Icon="@Icons.Material.Outlined.Translate" Color="Color.Inherit" Direction="Direction.Bottom" OffsetY="true" Dense="true">
            <MudMenuItem @onclick='() => language.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("en-US"))'>EN</MudMenuItem>
            <MudMenuItem @onclick='() => language.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("zh-CN"))'>CN</MudMenuItem>
        </MudMenu>
        <MudMenu Icon="@Icons.Material.Filled.Settings" Color="Color.Inherit" Direction="Direction.Bottom" OffsetY="true" Dense="true">
            <MudMenuItem>Profile</MudMenuItem>
            <MudMenuItem OnClick="LogOutAsync">Logout</MudMenuItem>
        </MudMenu>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

<MudThemeProvider />
<MudDialogProvider FullWidth="true"
                   MaxWidth="MaxWidth.Small"
                   DisableBackdropClick="false"
                   NoHeader="false"
                   Position="DialogPosition.Center"/>
<MudSnackbarProvider />

@code
{
    bool _drawerOpen = true;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected async override Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authState.User.Identity.IsAuthenticated)
        {
            Navigation.NavigateTo("/login");

        }
    }

    private async Task LogOutAsync()
    {

        await Storage.RemoveItemAsync("access_token");
        await Storage.RemoveItemAsync("expiry_date");
        await Storage.RemoveItemAsync("user_id");

        await AuthenticationStateProvider.GetAuthenticationStateAsync();
        //_client.DefaultRequestHeaders.Authorization = null;
        Navigation.NavigateTo("/login");
    }
}