@namespace SMSGateway.Client.Components

@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider authStateProvider

<EditForm Model="_model" OnValidSubmit="ForgotPasswordAsync">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <MudCard>
        <MudCardHeader>
            <CardHeaderContent>
                <MudText Typo="Typo.h6" Align="Align.Center">Forgot Password?</MudText>
                <MudText Typo="Typo.subtitle2" Align="Align.Center">Request a reset email</MudText>
            </CardHeaderContent>
        </MudCardHeader>

        <MudCardContent>
            <MudTextField Label="Email" HelperText="Required" @bind-Value="@_model.Email" />

            <ValidationSummary />
            @if (!string.IsNullOrWhiteSpace(_errorMessage))
            {
                <MudItem md="4" xs="12">
                    <MudAlert Severity="Severity.Error" Variant="Variant.Filled" Square="true" Class="my-2">@_errorMessage</MudAlert>
                </MudItem>
            }

        </MudCardContent>

        <MudCardActions Class="oi-justify-center">
            <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="mx-auto" Disabled="_isBusy">Reset Password</MudButton>
        </MudCardActions>
        <br><br>
        <MudCardActions>
            <MudButton @onclick="NavigateToLoginComponent" Variant="Variant.Outlined" Color="Color.Success" Class="mx-auto" Disabled="_isBusy">Sign In</MudButton>
            <MudButton @onclick="NavigateToRegisterComponent" Variant="Variant.Outlined" Color="Color.Error" Class="mx-auto" Disabled="_isBusy">Sign Up</MudButton>
        </MudCardActions>
    </MudCard>
</EditForm>

@code {
    private void NavigateToLoginComponent() { NavigationManager.NavigateTo("/register"); }
    private void NavigateToRegisterComponent() { NavigationManager.NavigateTo("/login"); }

    string Password { get; set; } = "";

    bool PasswordVisibility;
    InputType PasswordInput = InputType.Password;

    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }
}
