@page "/group"

@using SMSGateway.Client.Models
@using System.Net.Http.Json
@using System.Security.Claims
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigation
@inject MudBlazor.ISnackbar _snackbar
@inject HttpClient _httpClient
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject IDialogService DialogService
@attribute [Authorize]

<MudPaper Height="100%" Width="100%">
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudTable Items="@ListOfGroups" Filter="new Func<GroupModel, bool>(Search)" SortLabel="SortBy">
            <ToolBarContent>
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">Group List</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudFab aria-label="Create new group" @onclick="(e => Create())" Color="Color.Tertiary" Icon="@Icons.Material.Filled.Add" Size="Size.Small" IconSize="Size.Small" Class="ma-2" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Reference Id</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<GroupModel, object>(x=>x.GroupName)" T="GroupModel">Group Name</MudTableSortLabel></MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="referenceId">@context.ReferenceId</MudTd>
                <MudTd DataLabel="firstName">@context.GroupName</MudTd>
                <MudTd DataLabel="">
                    <MudFab aria-label="Edit group" @onclick="@(()=>Edit(@context))" Color="Color.Primary"
                            Icon="@Icons.Material.Filled.Edit" Size="Size.Small" IconSize="Size.Small" />
                    <MudFab aria-label="Delete group" @onclick="@(()=>Delete(@context))" Color="Color.Secondary"
                            Icon="@Icons.Material.Filled.Delete" Size="Size.Small" IconSize="Size.Small" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
        </MudTable>
    </MudContainer>
</MudPaper>

@code {

    private string searchString = "";

    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private IEnumerable<GroupModel> ListOfGroups = new List<GroupModel>();

    private bool Search(GroupModel model) => SearchFunc(model, searchString);

    protected override async Task OnInitializedAsync()
    {
        var authState = await _authenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated != true)
        {
            _navigation.NavigateTo("/login");
        }
        else
        {
            ListOfGroups = await _httpClient.GetFromJsonAsync<List<GroupModel>>("/api/group/GetGroup");
        }
    }

    private bool SearchFunc(GroupModel model, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (model.ReferenceId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (model.GroupName.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{model.ReferenceId} {model.GroupName}".Contains(searchString))
            return true;
        return false;
    }
}
