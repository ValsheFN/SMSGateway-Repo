@using SMSGateway.Client.Models
@using System.ComponentModel.DataAnnotations
@using System.Linq
@using System.Net.Http.Headers
@using Newtonsoft.Json
@using CSharpVitamins;

@inject Blazored.LocalStorage.ISyncLocalStorageService _localStorage
@inject IDialogService DialogService
@inject HttpClient _httpClient
@inject ISnackbar Snackbar
@inject NavigationManager _navigation

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Create" Class="mr-3 mb-n1" />
            Add contacts to a group
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudGrid>
            <MudItem xs="12" md="12">
                <MudSelect Label="Contact group" @bind-Value="@groupValue" HelperText="Select group"
                           OpenIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary">
                    @foreach (var item in groupList)
                    {
                        <MudSelectItem Value="item.GroupName">@item.GroupName</MudSelectItem>
                    }

                </MudSelect>
            </MudItem>
            <MudItem xs="12" md="12">
                <MudSelect Label="Contacts" HelperText="Select contacts"
                           MultiSelection="true" OffsetY="true" SelectAll="true" SelectAllText="Select all contacts"
                           @bind-Value="@contactValue" AdornmentIcon="@Icons.Material.Filled.Search">
                    @foreach (var contact in ListOfContacts)
                    {
                        <MudSelectItem Value="@contact.ReferenceId">@contact.FirstName @contact.LastName (@contact.PhoneNumber) </MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
        </MudGrid>
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e)=>CreateContactGroup(contactGroup) )">Create Contact Group</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public ContactGroupModel contactGroup { get; set; } = new ContactGroupModel();

    private IEnumerable<ContactModel> ListOfContacts = new List<ContactModel>();
    private IEnumerable<ContactModel> SelectedContact = new List<ContactModel>();
    private IEnumerable<ContactGroupModel> ListOfContactGroups = new List<ContactGroupModel>();
    private IEnumerable<GroupModel> groupList = new List<GroupModel>();

    private string contactValue { get; set; }

    private string groupValue { get; set; }

    protected async override void OnInitialized()
    {
        var token = _localStorage.GetItemAsString("access_token");
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        groupList = await _httpClient.GetFromJsonAsync<List<GroupModel>>("/api/group/GetGroup");
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        ListOfContacts = await _httpClient.GetFromJsonAsync<List<ContactModel>>("/api/contact/GetContact");
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        ListOfContactGroups = await _httpClient.GetFromJsonAsync<List<ContactGroupModel>>("/api/contactGroup/GetContactGroup");
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async void CheckContact()
    {
        if (!string.IsNullOrWhiteSpace(groupValue))
        {
            var token = _localStorage.GetItemAsString("access_token");
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var contactGroup = await _httpClient.GetFromJsonAsync<List<ContactGroupModel>>("/api/contactGroup/GetContactGroup?groupName=" + groupValue);
            ListOfContacts = ListOfContacts.Where(x => contactGroup.Any(x2 => x2.PhoneNumber != x.PhoneNumber));
            StateHasChanged();
        }
    }

    private async void CreateContactGroup(ContactGroupModel model)
    {
        var contactGroupsList = new List<ContactGroupModel>();
        var userId = _localStorage.GetItemAsString("user_id");
        var token = _localStorage.GetItemAsString("access_token");

        List<string> collection = new List<string>(contactValue.Split(new string[] { ", " }, StringSplitOptions.None));


        foreach (var item in collection)
        {
            //var token = _localStorage.GetItemAsString("access_token");
            _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
            var contactDetails = await _httpClient.GetFromJsonAsync<List<ContactModel>>("/api/contact/GetContact?referenceId=" + item);

            if (!(contactDetails.Count == 0))
            {
                var contactDetail = contactDetails.FirstOrDefault();
                ShortGuid guid = Guid.NewGuid().ToString();
                var referenceId = guid;

                contactGroupsList.Add(new ContactGroupModel
                {
                    ReferenceId = referenceId,
                    GroupName = groupValue,
                    ContactId = contactDetail.Id,
                    FirstName = contactDetail.FirstName,
                    LastName = contactDetail.LastName,
                    PhoneNumber = contactDetail.PhoneNumber
                });
            }

        }

        var json = JsonConvert.SerializeObject(contactGroupsList);
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await _httpClient.PostAsJsonAsync("/api/contactGroup/ImportContactGroup/", contactGroupsList);

        if (response.IsSuccessStatusCode)
        {
            MudDialog.Close(DialogResult.Ok(model.PhoneNumber));
            Snackbar.Add("Contact group created", Severity.Success);
        }
        else
        {
            Snackbar.Add("Fail to create contact group", Severity.Error);
        }
    }
}
