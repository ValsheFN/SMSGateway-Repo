@using SMSGateway.Client.Models
@using System.Net.Http.Headers

@inject Blazored.LocalStorage.ISyncLocalStorageService _localStorage
@inject HttpClient _httpClient
@inject ISnackbar Snackbar
@inject NavigationManager _navigation

@using Newtonsoft.Json

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.DeleteForever" Class="mr-3 mb-n1" />
            Delete role
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField Variant="Variant.Outlined" ReadOnly="true" @bind-Value="@role.Id" Label="Id" />
        <MudTextField Variant="Variant.Outlined" @bind-Value="@role.Name" Label="Role name" ReadOnly="true" />
    </DialogContent>
    <DialogActions>
        <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Cancel">Cancel</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@((e) => DeleteRole(@role))">Delete Role</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter] public RoleModel role { get; set; } = new RoleModel();

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async void DeleteRole(RoleModel model)
    {
        var token = _localStorage.GetItemAsString("access_token");
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        var response = await _httpClient.DeleteAsync("/api/role?id=" + model.Id);

        var responseBody = await response.Content.ReadAsStringAsync();
        var result = JsonConvert.DeserializeObject<OperationResponse<RoleModel>>(responseBody);

        if (result.IsSuccess)
        {
            MudDialog.Close(DialogResult.Ok(""));
            Snackbar.Add(result.Message, Severity.Success);
        }
        else
        {
            MudDialog.Close(DialogResult.Ok(""));
            Snackbar.Add(result.Message, Severity.Error);
        }
    }
}
