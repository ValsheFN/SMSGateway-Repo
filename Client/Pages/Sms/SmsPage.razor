@page "/sms"

@using SMSGateway.Client.Models
@using System.Net.Http.Json
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Microsoft.Extensions.Configuration
@using System.Net.Http.Headers

@inject Blazored.LocalStorage.ISyncLocalStorageService _localStorage
@inject AuthenticationStateProvider _authenticationStateProvider
@inject HttpClient _httpClient
@inject IConfiguration _configuration
@inject ISnackbar _snackbar

@attribute [Authorize]

<MudPaper Height="100%" Width="100%">
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudCard>
            <MudCardContent>
                <MudForm>
                    <MudGrid>
                        <MudItem xs="12" md="12">
                            <MudTabs Elevation="4" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Color="@Color.Primary">
                                <MudTabPanel OnClick="@RemoveContact" Text="Send to Phone Number">
                                    <MudItem xs="12" md="12">
                                        <MudTextField Lines="1" @bind-Value="@smsConfig.SendTo" Variant="Variant.Outlined" T="string" Label="Phone Numbers" />
                                    </MudItem>
                                </MudTabPanel>
                                <MudTabPanel OnClick="@RemovePhoneNumber" Text="Send to Contact Book">
                                    <MudItem xs="12" md="12">
                                        <MudSelect Label="Contacts" HelperText="Select contacts"
                                                   MultiSelection="true" OffsetY="true" SelectAll="true" SelectAllText="Select all contacts"
                                                   @bind-Value="contactValue" @bind-SelectedValues="contactOptions" AdornmentIcon="@Icons.Material.Filled.Search">
                                            @foreach (var contact in contactList)
                                            {
                                                <MudSelectItem Value="@contact.PhoneNumber">@contact.FirstName @contact.LastName (@contact.PhoneNumber)</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                    <MudItem xs="12" md="12">
                                        <MudSelect Label="Contact Groups" HelperText="Select contact groups"
                                                   MultiSelection="true" OffsetY="true" SelectAll="true" SelectAllText="Select all contact groups"
                                                   @bind-Value="groupValue" @bind-SelectedValues="groupOptions" AdornmentIcon="@Icons.Material.Filled.Search">
                                            @foreach (var group in groupList)
                                            {
                                                <MudSelectItem Value="@group.GroupName">@group.GroupName</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                </MudTabPanel>
                            </MudTabs>
                        </MudItem>

                        <MudItem xs="12" md="12">
                            <MudTabs Elevation="4" Rounded="true" ApplyEffectsToContainer="true" PanelClass="pa-6" Color="@Color.Primary">
                                <MudTabPanel OnClick="@RemoveTemplate" Text="Write Message">
                                    <MudItem xs="12" md="12">
                                        <MudTextField Lines="10" @bind-Value="@smsConfig.Content" Variant="Variant.Outlined" T="string" Label="Messages" />
                                    </MudItem>
                                </MudTabPanel>
                                <MudTabPanel OnClick="@RemoveMessage" Text="Use Template">
                                    <MudItem xs="12" md="12">
                                        <MudSelect Label="Template" @bind-Value="templateValue" HelperText="Select template"
                                                   OpenIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary">
                                            @foreach (var item in templateList)
                                            {
                                                <MudSelectItem Value="item.ReferenceId">@item.SmsTemplateName</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                </MudTabPanel>
                            </MudTabs>
                        </MudItem>
                        <MudItem xs="12" md="12">
                            <MudForm>
                                <MudText Typo="Typo.body1" Color="Color.Primary">Time :</MudText>
                                <MudRadioGroup @bind-SelectedOption="@SelectedTime">
                                    <MudRadio Option="@("Now")" Color="Color.Primary">Now</MudRadio>
                                    <MudRadio Option="@("At date and time")" Color="Color.Primary">At date and time</MudRadio>
                                    <MudRadio Option="@("After a delay")" Color="Color.Primary">After a delay</MudRadio>
                                    <MudRadio Option="@("Between hours")" Color="Color.Primary">Between hours</MudRadio>
                                    <MudRadio Option="@("Priority")" Color="Color.Primary">Priority</MudRadio>
                                </MudRadioGroup>
                                <MudItem xs="12" sm="6" md="4">
                                    @if (SelectedTime == "At date and time")
                                    {
                                        <div>
                                            <MudDatePicker MinDate="sendDate" Label="Send Date" @bind-Date="sendDate" DateFormat="dd/MM/yyyy" />
                                            <MudTimePicker Label="Send Time" @bind-Time="sendTime" />
                                        </div>
                                    }
                                </MudItem>
                                <MudItem xs="15" sm="8" md="4">
                                    @if (SelectedTime == "After a delay")
                                    {
                                        <div>
                                            <MudTimePicker Label="Send After" @bind-Time="sendAfter" />
                                        </div>
                                    }
                                </MudItem>
                                <MudItem xs="15" sm="8" md="4">
                                    @if (SelectedTime == "Between hours")
                                    {
                                        <div>
                                            <MudTimePicker Label="Start Time" @bind-Time="startTime" />
                                            <MudText Typo="Typo.body1" Color="Color.Primary"> until </MudText>
                                            <MudTimePicker Label="End Time" @bind-Time="endTime" />
                                        </div>
                                    }
                                </MudItem>
                            </MudForm>
                        </MudItem>
                        <MudDivider FlexItem="true" />
                        <MudItem>
                            <MudForm>
                                <MudText Typo="Typo.body1" Color="Color.Primary">Message Type :</MudText>
                                <MudRadioGroup @bind-SelectedOption="@SelectedType">
                                    <MudRadio Option="@("SMS")" Color="Color.Primary">SMS</MudRadio>
                                    <MudRadio Option="@("Flash SMS")" Color="Color.Primary">Flash SMS</MudRadio>
                                    <MudRadio Option="@("WAP Push Link")" Color="Color.Primary">WAP Push Link</MudRadio>
                                </MudRadioGroup>
                            </MudForm>
                        </MudItem>
                    </MudGrid>
                </MudForm>
            </MudCardContent>
        </MudCard>

        <MudPaper Class="pa-4 justify-center my-4 mud-text-align-center">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="mx-2" OnClick="@(()=>SendSms(smsConfig))">Send</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" Class="mx-2">Clear</MudButton>
        </MudPaper>
    </MudContainer>
</MudPaper>

@code {

    //private IConfiguration _configuration;
    public SmsModel smsConfig { get; set; } = new();

    public string contactValue { get; set; } = "";
    private HashSet<string> contactOptions { get; set; } = new HashSet<string>() { };

    public string groupValue { get; set; } = "";
    private HashSet<string> groupOptions { get; set; } = new HashSet<string>() { };

    private string templateValue { get; set; } = "";

    private IEnumerable<ContactModel> contactList = new List<ContactModel>();
    private IEnumerable<GroupModel> groupList = new List<GroupModel>();
    private IEnumerable<SmsTemplateModel> templateList = new List<SmsTemplateModel>();

    public string SelectedTime { get; set; } = "Now";
    public string SelectedType { get; set; } = "SMS";

    MudTimePicker _picker;
    DateTime? sendDate = DateTime.Today;
    TimeSpan? sendTime = new TimeSpan(00, 00, 00);

    TimeSpan? sendAfter = new TimeSpan(00, 00, 00);

    TimeSpan? startTime = new TimeSpan(00, 00, 00);
    TimeSpan? endTime = new TimeSpan(00, 00, 00);
    private bool autoClose;
    private bool readOnly;

    protected async override Task OnInitializedAsync()
    {
        var token = _localStorage.GetItemAsString("access_token");
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        contactList = await _httpClient.GetFromJsonAsync<List<ContactModel>>("/api/contact/GetContact");
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        groupList = await _httpClient.GetFromJsonAsync<List<GroupModel>>("/api/group/GetGroup");
        _httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", token);
        templateList = await _httpClient.GetFromJsonAsync<List<SmsTemplateModel>>("/api/smsTemplate/GetSmsTemplate");
    }

    private void RemovePhoneNumber()
    {
        smsConfig.SendTo = "";
    }

    private void RemoveContact()
    {
        contactOptions.Clear();
        groupOptions.Clear();
    }

    private void RemoveMessage()
    {
        smsConfig.Content = "";
    }

    private void RemoveTemplate()
    {
        templateValue = "";
    }
}
