@page "/topup"

@using SMSGateway.Client.Models
@using System.Net.Http.Json
@using System.Security.Claims
@inject AuthenticationStateProvider _authenticationStateProvider
@inject NavigationManager _navigation
@inject MudBlazor.ISnackbar _snackbar
@inject HttpClient _httpClient
@inject Blazored.LocalStorage.ISyncLocalStorageService localStorage
@inject IDialogService DialogService
@attribute [Authorize]

<AuthorizeView Roles="Super User">
    <NotAuthorized>
        <h4>The user is not authorized</h4>
    </NotAuthorized>
</AuthorizeView>

<MudPaper Height="100%" Width="100%">
    <MudContainer MaxWidth="MaxWidth.Large">
        <MudTable Items="@ListOfTopUps" Filter="new Func<TopUpModel, bool>(Search)" SortLabel="SortBy">
            <ToolBarContent>
                <MudText Typo="Typo.h6" Color="Color.Primary" Class="mb-4">Top Up</MudText>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                <MudFab aria-label="Request top up" @onclick="(e => Create())" Color="Color.Tertiary" Icon="@Icons.Material.Filled.Add" Size="Size.Small" IconSize="Size.Small" Class="ma-2" />
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Reference Id</MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<TopUpModel, object>(x=>x.Requester)" T="TopUpModel">Requester</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<TopUpModel, object>(x=>x.TopUpValue)" T="TopUpModel">Top Up Value</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<TopUpModel, object>(x=>x.Status)" T="TopUpModel">Status</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<TopUpModel, object>(x=>x.RequestDate)" T="TopUpModel">Request Date</MudTableSortLabel></MudTh>
                <MudTh><MudTableSortLabel SortBy="new Func<TopUpModel, object>(x=>x.GrantDate)" T="TopUpModel">Granted Date</MudTableSortLabel></MudTh>
                <MudTh>Granted By</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="referenceId">@context.ReferenceId</MudTd>
                <MudTd DataLabel="requester">@context.Requester</MudTd>
                <MudTd DataLabel="topUpValue">@context.TopUpValue</MudTd>
                <MudTd DataLabel="status">@context.Status</MudTd>
                <MudTd DataLabel="requestDate">@context.RequestDate</MudTd>
                <MudTd DataLabel="grantDate">@context.GrantDate</MudTd>
                <MudTd DataLabel="grantedBy">@context.GrantedBy</MudTd>
                <MudTd DataLabel="">
                    <MudFab aria-label="Approve top up" @onclick="@(()=>Approve(@context))" Color="Color.Primary"
                            Icon="@Icons.Material.Filled.Approval" Size="Size.Small" IconSize="Size.Small" />
                    <MudFab aria-label="Reject top up" @onclick="@(()=>Reject(@context))" Color="Color.Secondary"
                            Icon="@Icons.Material.Filled.Block" Size="Size.Small" IconSize="Size.Small" />
                </MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100 }" />
            </PagerContent>
        </MudTable>
    </MudContainer>
</MudPaper>

@code {

    private string searchString = "";

    private IEnumerable<TopUpModel> ListOfTopUps = new List<TopUpModel>();

    private bool Search(TopUpModel model) => SearchFunc(model, searchString);

    protected override async Task OnInitializedAsync()
    {
        ListOfTopUps = await _httpClient.GetFromJsonAsync<List<TopUpModel>>("/api/topup/GetTopup");
    }

    private bool SearchFunc(TopUpModel model, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (model.ReferenceId.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (model.Requester.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ((model.TopUpValue.ToString()).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (model.Status.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ((model.RequestDate.ToString()).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ((model.GrantDate.ToString()).Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{model.ReferenceId} {model.Requester} {model.TopUpValue} {model.Status} {model.RequestDate} {model.GrantDate}".Contains(searchString))
            return true;
        return false;
    }
}
